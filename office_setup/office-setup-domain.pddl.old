(define (domain office-setup-domain)

    (:requirements
        :strips
        :typing
        :negative-preconditions
    )

    (:types
        room locatable - object
        robot grabbable movable - locatable
    )

    (:predicates
        (at ?something - locatable ?where - room)
        (is-holding ?who - robot ?something - grabbable)
        (is-free ?who - robot)
        (inside ?what - grabbable ?where - movable)
        (nonempty ?what - movable)  ; True if at least one item is inside
        (more-than-one-item-inside ?what - movable)  ; True if at least two items are inside
    )

    (:action move_to
        :parameters (?who - robot ?from - room ?to - room)
        :precondition (and (at ?who ?from))
        :effect (and (not (at ?who ?from)) (at ?who ?to))
    )
    
    (:action grab
        :parameters (?who - robot ?what - grabbable ?where - room)
        :precondition (and (at ?who ?where) (is-free ?who))
        :effect (and (not (at ?what ?where)) (is-holding ?who ?what) (not (is-free ?who)))
    )
    
    ;; Putting the first item inside
    (:action put_inside_empty
        :parameters (?who - robot ?what - grabbable ?where - movable ?room - room)
        :precondition (and 
                            (at ?who ?room) 
                            (at ?where ?room) 
                            (is-holding ?who ?what) 
                            (not (nonempty ?where))
                        )
        :effect (and 
                    (inside ?what ?where) 
                    (not (is-holding ?who ?what)) 
                    (is-free ?who) 
                    (nonempty ?where)
                )
    )

    ;; Putting additional items inside
    (:action put_inside
        :parameters (?who - robot ?what - grabbable ?where - movable ?room - room)
        :precondition (and 
                        (at ?who ?room) 
                        (at ?where ?room) 
                        (is-holding ?who ?what) 
                        (nonempty ?where)
                    )
        :effect (and 
                    (inside ?what ?where) 
                    (not (is-holding ?who ?what)) 
                    (is-free ?who) 
                    (more-than-one-item-inside ?where)
                )
    )

    (:action remove_from
        :parameters (?who - robot ?what - grabbable ?in - movable ?where - room)
        :precondition (and 
                        (at ?who ?where) 
                        (at ?in ?where) 
                        (inside ?what ?in) 
                        (is-free ?who)    
                        (more-than-one-item-inside ?in)
                    )
        :effect (and 
                    (not (inside ?what ?in)) 
                    (is-holding ?who ?what) 
                    (not (is-free ?who))
                    (not (more-than-one-item-inside ?in))
                )  ; Now only one item remains
    )

    (:action remove_last
        :parameters (?who - robot ?what - grabbable ?in - movable ?where - room)
        :precondition (and 
                        (at ?who ?where) 
                        (at ?in ?where) 
                        (inside ?what ?in) 
                        (is-free ?who)
                        (not (more-than-one-item-inside ?in))
                        
                    )
        :effect (and 
                    (not (inside ?what ?in)) 
                    (is-holding ?who ?what) 
                    (not (is-free ?who))
                    (not (nonempty ?in))
                )  ; Now completely empty
    )

    (:action push
        :parameters (?who - robot ?what - movable ?from - room ?to - room)
        :precondition (and 
                        (at ?who ?from)
                        (at ?what ?from)
                        (not (nonempty ?what))
                    
                    )
        :effect (and (not (at ?who ?from)) (not (at ?what ?from))
                     (at ?who ?to) (at ?what ?to))
    )
)
